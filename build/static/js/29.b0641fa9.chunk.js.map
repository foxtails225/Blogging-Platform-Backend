{"version":3,"sources":["views/auth/VerifyCodeView/VerifyCode.tsx","views/auth/VerifyCodeView/index.tsx"],"names":["useStyles","makeStyles","theme","box","display","columnGap","gridTemplateColumns","digit","textAlign","helper","mx","VerifyCodeView","classes","isMountedRef","useIsMountedRef","verifyCode","useAuth","location","useLocation","itemsRef","useRef","useEffect","current","slice","initialValues","email","state","username","code","submit","validationSchema","Yup","shape","max","required","of","onSubmit","values","a","setErrors","setStatus","setSubmitting","join","console","error","success","message","errors","handleBlur","handleSubmit","isSubmitting","setFieldValue","touched","noValidate","Box","mt","Typography","color","variant","pt","className","map","ref","i","TextField","Boolean","Array","isArray","length","fullWidth","inputRef","el","key","name","onBlur","onKeyDown","event","focus","Number","isInteger","parseInt","onPaste","pasteArray","clipboardData","getData","split","valid","forEach","x","value","FormHelperText","find","undefined","Button","disabled","size","type","root","backgroundColor","palette","background","dark","flexDirection","minHeight","methodIcon","height","marginLeft","spacing","marginRight","cardContainer","paddingBottom","paddingTop","cardContent","padding","method","handleClick","axios","post","Page","title","Container","maxWidth","mb","justifyContent","to","Logo","Card","CardContent","alignItems","gutterBottom","flexGrow","VerifyCode","my","Divider","Link","component","RouterLink","onClick"],"mappings":"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","file":"static/js/29.b0641fa9.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Location } from 'history';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormHelperText,\r\n  TextField,\r\n  Typography,\r\n  makeStyles,\r\n  Theme\r\n} from '@material-ui/core';\r\nimport useAuth from 'src/hooks/useAuth';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\n\r\ninterface LocationState {\r\n  username?: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  box: {\r\n    display: 'grid',\r\n    columnGap: '16px',\r\n    gridTemplateColumns: 'repeat(7, 1fr)'\r\n  },\r\n  digit: {\r\n    display: 'inline-block',\r\n    textAlign: 'center',\r\n    '& .MuiInputBase-input': {\r\n      textAlign: 'center'\r\n    }\r\n  },\r\n  helper: {\r\n    mx: '14px'\r\n  }\r\n}));\r\n\r\nconst VerifyCodeView: FC = () => {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const { verifyCode } = useAuth() as any;\r\n  const location = useLocation() as Location<LocationState>;\r\n  const itemsRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    itemsRef.current = itemsRef.current.slice(0, 6);\r\n  }, []);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: location.state?.username || '',\r\n        code: ['', '', '', '', '', ''],\r\n        submit: null\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('Must be a valid email')\r\n          .max(255)\r\n          .required('Email is required'),\r\n        code: Yup.array().of(Yup.string().required('Code is required'))\r\n      })}\r\n      onSubmit={async (\r\n        values,\r\n        { setErrors, setStatus, setSubmitting }\r\n      ): Promise<void> => {\r\n        try {\r\n          await verifyCode(values.email, values.code.join(''));\r\n        } catch (err) {\r\n          console.error(err);\r\n          if (isMountedRef.current) {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: err.message });\r\n            setSubmitting(false);\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        touched,\r\n        values\r\n      }): JSX.Element => (\r\n        <form noValidate onSubmit={handleSubmit}>\r\n          <Box mt={3}>\r\n            <Typography color=\"textSecondary\" variant=\"subtitle2\">\r\n              Verification code\r\n            </Typography>\r\n          </Box>\r\n          <Box pt={1} className={classes.box}>\r\n            {[1, 2, 3, 4, 5, 6].map((ref, i) => (\r\n              <TextField\r\n                error={Boolean(\r\n                  Array.isArray(touched.code) &&\r\n                    touched.code.length === 6 &&\r\n                    errors.code\r\n                )}\r\n                fullWidth\r\n                inputRef={el => (itemsRef.current[i] = el)}\r\n                // eslint-disable-next-line react/no-array-index-key\r\n                key={`code-${i}`}\r\n                name={`code[${i}]`}\r\n                onBlur={handleBlur}\r\n                onKeyDown={event => {\r\n                  // @ts-ignore\r\n                  if (event.code === 'ENTER') {\r\n                    if (values.code[i]) {\r\n                      setFieldValue(`code[${i}]`, '');\r\n                      return;\r\n                    }\r\n\r\n                    if (i > 0) {\r\n                      setFieldValue(`code[${i}]`, '');\r\n                      itemsRef.current[i - 1].focus();\r\n                      return;\r\n                    }\r\n                  }\r\n\r\n                  if (Number.isInteger(parseInt(event.key, 10))) {\r\n                    setFieldValue(`code[${i}]`, event.key);\r\n\r\n                    if (i < 5) {\r\n                      itemsRef.current[i + 1].focus();\r\n                    }\r\n                  }\r\n                }}\r\n                onPaste={event => {\r\n                  const paste = event.clipboardData.getData('text');\r\n                  const pasteArray = paste.split('');\r\n\r\n                  if (pasteArray.length !== 6) {\r\n                    return;\r\n                  }\r\n\r\n                  let valid = true;\r\n\r\n                  pasteArray.forEach(x => {\r\n                    if (!Number.isInteger(parseInt(x, 10))) {\r\n                      valid = false;\r\n                    }\r\n                  });\r\n\r\n                  if (valid) {\r\n                    setFieldValue('code', pasteArray);\r\n                    itemsRef.current[5].focus();\r\n                  }\r\n                }}\r\n                value={values.code[i]}\r\n                variant=\"outlined\"\r\n                className={classes.digit}\r\n              />\r\n            ))}\r\n          </Box>\r\n          {Boolean(\r\n            Array.isArray(touched.code) &&\r\n              touched.code.length === 6 &&\r\n              errors.code\r\n          ) && (\r\n            <FormHelperText error className={classes.helper}>\r\n              {Array.isArray(errors.code) &&\r\n                errors.code.find(x => x !== undefined)}\r\n            </FormHelperText>\r\n          )}\r\n          {errors.submit && (\r\n            <Box mt={3}>\r\n              <FormHelperText error>{errors.submit}</FormHelperText>\r\n            </Box>\r\n          )}\r\n          <Box mt={3}>\r\n            <Button\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Verify\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default VerifyCodeView;\r\n","import React, { FC } from 'react';\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport { Location } from 'history';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  Divider,\r\n  Link,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport VerifyCode from './VerifyCode';\r\nimport Logo from 'src/components/Logo';\r\nimport Page from 'src/components/Page';\r\nimport useAuth from 'src/hooks/useAuth';\r\nimport { Theme } from 'src/theme';\r\n\r\ninterface LocationState {\r\n  username?: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    minHeight: '100vh'\r\n  },\r\n  methodIcon: {\r\n    height: 30,\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  cardContainer: {\r\n    paddingBottom: 80,\r\n    paddingTop: 80\r\n  },\r\n  cardContent: {\r\n    padding: theme.spacing(4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    minHeight: 400\r\n  }\r\n}));\r\n\r\nconst VerifyCodeView: FC = () => {\r\n  const classes = useStyles();\r\n  const { method } = useAuth() as any;\r\n  const location = useLocation() as Location<LocationState>;\r\n  const email = location.state?.username;\r\n\r\n  const handleClick = async () => {\r\n    await axios.post('/resend-code', { email });\r\n  };\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"Verify Code\">\r\n      <Container className={classes.cardContainer} maxWidth=\"sm\">\r\n        <Box mb={8} display=\"flex\" justifyContent=\"center\">\r\n          <RouterLink to=\"/\">\r\n            <Logo />\r\n          </RouterLink>\r\n        </Box>\r\n        <Card>\r\n          <CardContent className={classes.cardContent}>\r\n            <Box\r\n              alignItems=\"center\"\r\n              display=\"flex\"\r\n              justifyContent=\"space-between\"\r\n              mb={3}\r\n            >\r\n              <div>\r\n                <Typography color=\"textPrimary\" gutterBottom variant=\"h2\">\r\n                  Verify Code\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Confirm registration using your verification code\r\n                </Typography>\r\n              </div>\r\n            </Box>\r\n            <Box flexGrow={1} mt={1}>\r\n              {method === 'JWT' && <VerifyCode />}\r\n            </Box>\r\n            <Box my={3}>\r\n              <Divider />\r\n            </Box>\r\n            <Box display=\"flex\">\r\n              <Link\r\n                component={RouterLink}\r\n                to=\"/login\"\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n              >\r\n                Have an account?\r\n              </Link>\r\n              <Box flexGrow={1} />\r\n              <Link variant=\"body2\" component=\"button\" onClick={handleClick}>\r\n                Resend Code\r\n              </Link>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default VerifyCodeView;\r\n"],"sourceRoot":""}