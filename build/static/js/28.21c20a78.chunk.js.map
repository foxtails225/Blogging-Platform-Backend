{"version":3,"sources":["views/auth/PasswordReset/PasswordReset.tsx","views/auth/PasswordReset/index.tsx"],"names":["useStyles","makeStyles","root","PasswordRecovery","className","rest","classes","history","useHistory","id","useParams","isMountedRef","useIsMountedRef","enableReinitialize","initialValues","password","passwordConfirm","submit","validationSchema","Yup","shape","min","max","required","oneOf","onSubmit","values","a","setErrors","setStatus","setSubmitting","recoveryToken","split","axios","post","current","success","push","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","clsx","TextField","error","Boolean","fullWidth","helperText","label","margin","name","onBlur","onChange","type","value","variant","Box","mt","FormHelperText","Button","color","disabled","size","theme","backgroundColor","palette","background","dark","display","flexDirection","minHeight","banner","paper","paddingBottom","spacing","paddingTop","borderBottom","divider","bannerChip","marginRight","methodIcon","height","marginLeft","cardContainer","cardContent","padding","PasswordResetView","method","useAuth","Page","title","Container","maxWidth","mb","justifyContent","to","Logo","Card","CardContent","alignItems","Typography","gutterBottom","flexGrow","PasswordReset","my","Divider","Link","component","RouterLink"],"mappings":"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","file":"static/js/28.21c20a78.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  TextField,\n  makeStyles,\n  FormHelperText\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\ninterface JWTLoginProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst PasswordRecovery: FC<JWTLoginProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { id } = useParams<{ id: string }>();\n  const isMountedRef = useIsMountedRef();\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        password: '',\n        passwordConfirm: '',\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        password: Yup.string()\n          .min(7, 'Must be at least 7 characters')\n          .max(255)\n          .required('Required'),\n        passwordConfirm: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Required')\n      })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          const recoveryToken = id.split('=')[1];\n          await axios.post('/password-reset', {\n            recoveryToken,\n            password: values.password\n          });\n\n          if (isMountedRef.current) {\n            setStatus({ success: true });\n            setSubmitting(false);\n            history.push('/login');\n          }\n        } catch (err) {\n          if (isMountedRef.current) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          noValidate\n          onSubmit={handleSubmit}\n          className={clsx(classes.root, className)}\n          {...rest}\n        >\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"New Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.passwordConfirm && errors.passwordConfirm)}\n            fullWidth\n            helperText={touched.passwordConfirm && errors.passwordConfirm}\n            label=\"Confirm Password\"\n            margin=\"normal\"\n            name=\"passwordConfirm\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.passwordConfirm}\n            variant=\"outlined\"\n          />\n          {errors.submit && (\n            <Box mt={3}>\n              <FormHelperText error>{errors.submit}</FormHelperText>\n            </Box>\n          )}\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Reset Password\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nPasswordRecovery.propTypes = {\n  className: PropTypes.string\n};\n\nexport default PasswordRecovery;\n","import React from 'react';\nimport type { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Link,\n  Card,\n  CardContent,\n  Divider,\n  Container,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport type { Theme } from 'src/theme';\nimport Page from 'src/components/Page';\nimport Logo from 'src/components/Logo';\nimport useAuth from 'src/hooks/useAuth';\nimport PasswordReset from './PasswordReset';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh'\n  },\n  banner: {\n    backgroundColor: theme.palette.background.paper,\n    paddingBottom: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n    borderBottom: `1px solid ${theme.palette.divider}`\n  },\n  bannerChip: {\n    marginRight: theme.spacing(2)\n  },\n  methodIcon: {\n    height: 30,\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2)\n  },\n  cardContainer: {\n    paddingBottom: 80,\n    paddingTop: 80,\n  },\n  cardContent: {\n    padding: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: 400\n  },\n}));\n\nconst PasswordResetView: FC = () => {\n  const classes = useStyles();\n  const { method } = useAuth();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Password Reset\"\n    >\n      <Container\n        className={classes.cardContainer}\n        maxWidth=\"sm\"\n      >\n        <Box\n          mb={8}\n          display=\"flex\"\n          justifyContent=\"center\"\n        >\n          <RouterLink to=\"/\">\n            <Logo />\n          </RouterLink>\n        </Box>\n        <Card>\n          <CardContent className={classes.cardContent}>\n            <Box\n              alignItems=\"center\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              mb={3}\n            >\n              <div>\n                <Typography\n                  color=\"textPrimary\"\n                  gutterBottom\n                  variant=\"h2\"\n                >\n                  Password Reset\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                >\n                 Reset your account password using your recovery link\n                </Typography>\n              </div>\n            </Box>\n            <Box\n              flexGrow={1}\n              mt={3}\n            >\n              {method === 'JWT' && <PasswordReset /> }\n            </Box>\n            <Box my={3}>\n              <Divider />\n            </Box>\n            <Link\n              component={RouterLink}\n              to=\"/login\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              Have an account?\n            </Link>\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n};\n\nexport default PasswordResetView;\n"],"sourceRoot":""}