{"version":3,"sources":["components/CustomIcon.tsx","components/PaymentIntent/CheckoutForm.tsx","components/PaymentIntent/CustomForm.tsx","components/PaymentIntent/index.tsx","views/account/ProfileView/Header.tsx","components/PostOverViewCard/Reactions.tsx","components/PostOverViewCard/index.tsx","views/account/ProfileView/Profile/About.tsx","views/account/ProfileView/Profile/RecentComments.tsx","views/account/ProfileView/Profile/index.tsx","views/account/ProfileView/index.tsx"],"names":["useStyles","makeStyles","root","textAlign","icon","display","height","width","CustomIcon","props","classes","fontSize","alt","className","src","CARD_ELEMENT_OPTIONS","style","base","color","colors","grey","fontFamily","fontSmoothing","invalid","iconColor","theme","CheckoutForm","author","open","secret","amount","onOpen","onBack","onSuccess","rest","user","useAuth","stripe","useStripe","elements","useElements","handleSubmit","event","a","preventDefault","confirmCardPayment","payment_method","card","getElement","CardElement","billing_details","email","result","error","console","log","message","paymentIntent","status","axios","post","_id","type","title","description","name","isRead","url","client","fee","paymentId","id","clsx","onSubmit","DialogContent","Box","border","padding","borderRadius","options","DialogActions","Button","onClick","disabled","CustomForm","onNext","useState","setAmount","params","stripeId","response","data","Grid","container","justify","item","md","TextField","label","defaultValue","InputProps","readOnly","placeholder","value","onChange","target","inputProps","min","startAdornment","InputAdornment","position","backButton","marginRight","spacing","instructions","marginTop","marginBottom","StripeCheckout","postId","activeStep","setActiveStep","setSecret","setAuthor","steps","useEffect","get","fetchData","Dialog","keepMounted","onClose","aria-labelledby","fullWidth","Stepper","alternativeLabel","map","Step","key","StepLabel","qty","prevActiveStep","stripePromise","cover","backgroundSize","backgroundRepeat","backgroundPosition","content","top","left","backgroundImage","visibility","changeButton","bottom","right","backgroundColor","blueGrey","palette","common","white","breakpoints","down","avatar","action","marginLeft","bioBox","Header","profile","location","useLocation","isFollow","setIsFollow","disable","setDisable","follow","followers","includes","isDisable","pathname","handleFollow","userId","put","Container","maxWidth","mt","alignItems","Avatar","Typography","variant","Hidden","smDown","bio","flexGrow","size","component","RouterLink","to","mdUp","iconRoot","likedButton","red","likedIcon","commentIcon","Reactions","history","useHistory","isAuthenticated","isLiked","setLiked","liked","count","likes","setLikes","setOpen","users","forEach","updateLiked","handleOpen","Tooltip","IconButton","prevLikes","ml","push","slug","from","comments","length","href","date","media","PostOverViewCard","selectedImage","setSelectedImage","Card","CardHeader","disableTypography","subheader","moment","createdAt","fromNow","Link","px","pb","large","initialStatus","published","pending","tags","blueAvatar","secondary","main","redAvatar","cardContent","paddingTop","About","setStatus","setDisabled","Divider","CardContent","List","ListItem","disableGutters","divider","ListItemAvatar","ListItemText","primary","primaryTypographyProps","Chip","borderRight","comment","textOverflow","overflow","RecentComments","isMountedRef","useIsMountedRef","setComments","getComments","useCallback","current","disablePadding","i","p","justifyContent","endIcon","Profile","posts","setPosts","isAuthor","setIsAuthor","page","setPage","getPosts","xs","lg","background","dark","minHeight","ProfileView","setProfile","Page","py"],"mappings":"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","file":"static/js/7.21e22e33.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { Icon, makeStyles } from '@material-ui/core';\r\n\r\ninterface CustomIconProps {\r\n  src: string;\r\n  [key: string]: any;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    textAlign: 'center'\r\n  },\r\n  icon: {\r\n    display: 'flex',\r\n    height: 'inherit',\r\n    width: 'inherit'\r\n  }\r\n}));\r\n\r\nconst CustomIcon: FC<CustomIconProps> = props => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Icon classes={{ root: classes.root }} fontSize=\"small\">\r\n      <img\r\n        alt=\"Custom Icon\"\r\n        className={classes.icon}\r\n        src={props.src}\r\n        {...props}\r\n      />\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default CustomIcon;\r\n","import React, { FC } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Box,\r\n  makeStyles,\r\n  colors\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport { Theme } from 'src/theme';\r\nimport { User } from 'src/types/user';\r\nimport useAuth from 'src/hooks/useAuth';\r\n\r\ninterface CheckoutFormProps {\r\n  className?: string;\r\n  open: boolean;\r\n  secret: string;\r\n  author: User;\r\n  amount: number;\r\n  onOpen: () => void;\r\n  onBack: () => void;\r\n  onSuccess: () => void;\r\n}\r\n\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    base: {\r\n      color: colors.grey[500],\r\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n      fontSmoothing: 'antialiased',\r\n      fontSize: '16px',\r\n      '::placeholder': {\r\n        color: colors.grey[500]\r\n      }\r\n    },\r\n    invalid: {\r\n      color: '#fa755a',\r\n      iconColor: '#fa755a'\r\n    }\r\n  }\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {}\r\n}));\r\n\r\nconst CheckoutForm: FC<CheckoutFormProps> = ({\r\n  className,\r\n  open,\r\n  author,\r\n  secret,\r\n  amount,\r\n  onOpen,\r\n  onBack,\r\n  onSuccess,\r\n  ...rest\r\n}) => {\r\n  const { user } = useAuth();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const classes = useStyles();\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmCardPayment(secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          email: author.email\r\n        }\r\n      }\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (e.g., insufficient funds)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // The payment has been processed!\r\n      if (result.paymentIntent.status === 'succeeded') {\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n        await axios.post<{ notification: Notification }>(\r\n          '/notifications/create',\r\n          {\r\n            user: author._id,\r\n            type: 'tips_success',\r\n            title: `New payment received`,\r\n            description: `You got the new tips. You received $${amount} from ${user.name}`,\r\n            isRead: false,\r\n            url: '#'\r\n          }\r\n        );\r\n        await axios.post('/transactions/create', {\r\n          user: author._id,\r\n          client: user._id,\r\n          amount: (amount * 5) / 4,\r\n          fee: amount / 4,\r\n          paymentId: result.paymentIntent.id,\r\n          type: 'tips'\r\n        });\r\n        onSuccess();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClose = () => onOpen();\r\n\r\n  const handleBack = () => onBack();\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <form onSubmit={handleSubmit}>\r\n        <DialogContent>\r\n          <Box border={1} padding={2} borderRadius={5}>\r\n            <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleBack} color=\"primary\">\r\n            Back\r\n          </Button>\r\n          <Button disabled={!stripe} type=\"submit\" color=\"primary\">\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nCheckoutForm.propTypes = {\r\n  className: PropTypes.string,\r\n  //@ts-ignore\r\n  open: PropTypes.bool,\r\n  onOpen: PropTypes.func,\r\n  onBack: PropTypes.func\r\n};\r\n\r\nexport default CheckoutForm;\r\n","import React, { FC, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  DialogContent,\r\n  DialogActions,\r\n  InputAdornment,\r\n  Button,\r\n  makeStyles,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport { Theme } from 'src/theme';\r\nimport { User } from 'src/types/user';\r\nimport axios from 'src/utils/axios';\r\n\r\ninterface CustomFormProps {\r\n  className?: string;\r\n  open: boolean;\r\n  author: User;\r\n  onOpen: () => void;\r\n  onNext: (secret: string, amount: number) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {}\r\n}));\r\n\r\nconst CustomForm: FC<CustomFormProps> = ({\r\n  className,\r\n  author,\r\n  open,\r\n  onOpen,\r\n  onNext,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const [amount, setAmount] = useState<number>();\r\n\r\n  const handleSubmit = async () => {\r\n    const params = { stripeId: author.stripeId, amount };\r\n    const response = await axios.post<{ secret: string }>(\r\n      '/stripe/secret',\r\n      params\r\n    );\r\n    if (response.data) {\r\n      onNext(response.data.secret, (amount * 4) / 5);\r\n    }\r\n  };\r\n\r\n  const handleChange = event => setAmount(event.target.value);\r\n\r\n  const handleClose = () => onOpen();\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <DialogContent>\r\n        <Grid container justify=\"center\">\r\n          <Grid item md={5}>\r\n            <TextField\r\n              label=\"Name\"\r\n              defaultValue={author.name}\r\n              InputProps={{\r\n                readOnly: true\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item md={5}>\r\n            <TextField\r\n              label=\"Amount\"\r\n              type=\"number\"\r\n              placeholder=\"Minimum of $3\"\r\n              value={amount}\r\n              onChange={handleChange}\r\n              error={amount < 3}\r\n              InputProps={{\r\n                inputProps: { min: 3 },\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">$</InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleSubmit}\r\n          disabled={amount < 3 || !amount}\r\n          color=\"primary\"\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </DialogActions>\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomForm.propTypes = {\r\n  className: PropTypes.string,\r\n  //@ts-ignore\r\n  open: PropTypes.bool,\r\n  onOpen: PropTypes.func,\r\n  onNext: PropTypes.func\r\n};\r\n\r\nexport default CustomForm;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { Elements } from '@stripe/react-stripe-js';\r\nimport {\r\n  Dialog,\r\n  Step,\r\n  StepLabel,\r\n  Stepper,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { Theme } from 'src/theme';\r\nimport { User } from 'src/types/user';\r\nimport axios from 'src/utils/axios';\r\nimport { stripePromise } from 'src/constants';\r\nimport CheckoutForm from './CheckoutForm';\r\nimport CustomForm from './CustomForm';\r\nimport { PostWithAuthor } from 'src/types/post';\r\n\r\ninterface StripeCheckoutProps {\r\n  className?: string;\r\n  postId: string;\r\n  open: boolean;\r\n  onOpen: () => void;\r\n  onSuccess?: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  backButton: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst getSteps = () => ['Author Info', 'Card Details'];\r\n\r\nconst StripeCheckout: FC<StripeCheckoutProps> = ({\r\n  className,\r\n  postId,\r\n  open,\r\n  onOpen,\r\n  onSuccess,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = useState<number>(0);\r\n  const [secret, setSecret] = useState<string>();\r\n  const [amount, setAmount] = useState<number>(0);\r\n  const [author, setAuthor] = useState<User>();\r\n  const steps = getSteps();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await axios.get<{ post: PostWithAuthor }>(\r\n        '/posts/getById/' + postId\r\n      );\r\n\r\n      if (response.data) {\r\n        setAuthor(response.data.post.author);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [postId]);\r\n\r\n  const handleNext = (value: string, qty: number) => {\r\n    setSecret(value);\r\n    setAmount(qty);\r\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleClose = () => onOpen();\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      {author && (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"checkform-dialog\"\r\n          fullWidth\r\n        >\r\n          <Stepper activeStep={activeStep} alternativeLabel>\r\n            {steps.map(label => (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n          {activeStep === 0 && (\r\n            <CustomForm\r\n              open={open}\r\n              author={author}\r\n              onOpen={onOpen}\r\n              onNext={handleNext}\r\n            />\r\n          )}\r\n          {activeStep === 1 && (\r\n            <Elements stripe={stripePromise}>\r\n              <CheckoutForm\r\n                open={open}\r\n                author={author}\r\n                amount={amount}\r\n                secret={secret}\r\n                onOpen={onOpen}\r\n                onBack={handleBack}\r\n                onSuccess={onSuccess}\r\n              />\r\n            </Elements>\r\n          )}\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StripeCheckout;\r\n","import React, { FC, useEffect, useState } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Container,\n  Hidden,\n  Typography,\n  colors,\n  makeStyles\n} from '@material-ui/core';\n// import AddPhotoIcon from '@material-ui/icons/AddPhotoAlternate';\nimport axios from 'src/utils/axios';\nimport { Theme } from 'src/theme';\nimport { User } from 'src/types/user';\nimport useAuth from 'src/hooks/useAuth';\n\ninterface HeaderProps {\n  className?: string;\n  profile: User;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  cover: {\n    position: 'relative',\n    height: 260,\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    '&:before': {\n      position: 'absolute',\n      content: '\" \"',\n      top: 0,\n      left: 0,\n      height: '100%',\n      width: '100%',\n      backgroundImage:\n        'linear-gradient(-180deg, rgba(0,0,0,0.00) 58%, rgba(0,0,0,0.32) 100%)'\n    },\n    '&:hover': {\n      '& $changeButton': {\n        visibility: 'visible'\n      }\n    }\n  },\n  changeButton: {\n    visibility: 'hidden',\n    position: 'absolute',\n    bottom: theme.spacing(3),\n    right: theme.spacing(3),\n    backgroundColor: colors.blueGrey[900],\n    color: theme.palette.common.white,\n    [theme.breakpoints.down('md')]: {\n      top: theme.spacing(3),\n      bottom: 'auto'\n    },\n    '&:hover': {\n      backgroundColor: colors.blueGrey[900]\n    }\n  },\n  avatar: {\n    border: `2px solid ${theme.palette.common.white}`,\n    height: 120,\n    width: 120,\n    top: -60,\n    left: theme.spacing(3),\n    position: 'absolute',\n    [theme.breakpoints.down('sm')]: {\n      height: 100,\n      width: 100,\n      left: theme.spacing(1)\n    }\n  },\n  action: {\n    marginLeft: theme.spacing(1)\n  },\n  bioBox: {\n    marginLeft: '160px',\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: '120px'\n    }\n  }\n}));\n\nconst Header: FC<HeaderProps> = ({ className, profile, ...rest }) => {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const location = useLocation();\n  const [isFollow, setIsFollow] = useState(false);\n  const [disable, setDisable] = useState(false);\n\n  useEffect(() => {\n    const follow =\n      profile.followers && user && profile.followers.includes(user._id);\n    const isDisable = user\n      ? user._id !== profile._id\n      : location.pathname !== '/account/profile';\n\n    setDisable(isDisable);\n    setIsFollow(follow);\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname, profile]);\n\n  const handleFollow = async () => {\n    const params = { userId: profile._id, isFollow };\n    await axios.put<{ user: User }>(`/account/follow`, params);\n    setIsFollow(!isFollow);\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <div\n        className={classes.cover}\n        style={{ backgroundImage: `url(${profile.cover})` }}\n      >\n        {/* {!disable && (\n          <Button\n            className={classes.changeButton}\n            variant=\"contained\"\n            startIcon={<AddPhotoIcon />}\n          >\n            Change Cover\n          </Button>\n        )} */}\n      </div>\n      <Container maxWidth=\"lg\">\n        <Box position=\"relative\" mt={1} display=\"flex\" alignItems=\"center\">\n          <Avatar\n            alt=\"Person\"\n            className={classes.avatar}\n            src={profile.avatar}\n          />\n          <Box className={classes.bioBox} mt={1}>\n            <Typography variant=\"h4\" color=\"textPrimary\">\n              {profile.name}\n            </Typography>\n            <Hidden smDown>\n              <Typography variant=\"overline\" color=\"textSecondary\">\n                {profile.bio}\n              </Typography>\n            </Hidden>\n          </Box>\n          <Box flexGrow={1} />\n          {!disable ? (\n            <Button\n              color=\"secondary\"\n              component={RouterLink}\n              size=\"small\"\n              to=\"/account/setting\"\n              variant=\"contained\"\n              className={classes.action}\n            >\n              Edit Profile\n            </Button>\n          ) : (\n            <>\n              {user && (\n                <Button\n                  color=\"secondary\"\n                  size=\"small\"\n                  variant=\"contained\"\n                  className={classes.action}\n                  onClick={handleFollow}\n                >\n                  {isFollow ? 'Unfollow' : 'Follow'}\n                </Button>\n              )}\n            </>\n          )}\n        </Box>\n        <Hidden mdUp>\n          <Box textAlign=\"center\">\n            <Typography variant=\"overline\" color=\"textSecondary\">\n              {profile.bio}\n            </Typography>\n          </Box>\n        </Hidden>\n      </Container>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  profile: PropTypes.object.isRequired\n};\n\nexport default Header;\n","import React, { useState, FC, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  IconButton,\n  Tooltip,\n  Typography,\n  colors,\n  makeStyles,\n  Theme\n} from '@material-ui/core';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { MessageCircle as MessageCircleIcon } from 'react-feather';\nimport CustomIcon from '../CustomIcon';\nimport axios from 'src/utils/axios';\nimport { Post, PostWithAuthor } from 'src/types/post';\nimport StripeCheckout from 'src/components/PaymentIntent';\nimport useAuth from 'src/hooks/useAuth';\n\ninterface ReactionsProps {\n  className?: string;\n  author: boolean;\n  post: PostWithAuthor;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  iconRoot: {\n    textAlign: 'center'\n  },\n  likedButton: {\n    color: colors.red[600],\n    padding: theme.spacing(1)\n  },\n  likedIcon: {\n    display: 'flex',\n    height: 'inherit',\n    width: 'inherit',\n    padding: theme.spacing(1)\n  },\n  commentIcon: {\n    color: colors.grey[500]\n  }\n}));\n\nconst Reactions: FC<ReactionsProps> = ({\n  className,\n  author,\n  post,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { user, isAuthenticated } = useAuth();\n  const [isLiked, setLiked] = useState<boolean>(false);\n  const [likes, setLikes] = useState<number>(post.liked.count);\n  const [open, setOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isAuthenticated)\n      post.liked?.users.forEach(item => item === user._id && setLiked(true));\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [post.liked.users]);\n\n  const updateLiked = async (): Promise<void> => {\n    const params = { postId: post._id, isLiked: !isLiked };\n    await axios.put<{ post: Post }>('/posts/liked', params);\n  };\n\n  const handleLike = (): void => {\n    setLiked(true);\n    setLikes(prevLikes => prevLikes + 1);\n    updateLiked();\n  };\n\n  const handleUnlike = (): void => {\n    setLiked(false);\n    setLikes(prevLikes => prevLikes - 1);\n    updateLiked();\n  };\n\n  const handleClick = (): void =>\n    history.push('/posts/public/' + post.slug, { from: 'profile' });\n\n  const handleOpen = (): void => setOpen(!open);\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      {isLiked ? (\n        <Tooltip title=\"Unlike\">\n          <IconButton\n            className={classes.likedButton}\n            onClick={handleUnlike}\n            disabled={!isAuthenticated}\n          >\n            <CustomIcon src=\"/static/icons/trending_filled.svg\" />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Like\">\n          <IconButton onClick={handleLike} disabled={!isAuthenticated}>\n            <CustomIcon src=\"/static/icons/trending_outlined.svg\" />\n          </IconButton>\n        </Tooltip>\n      )}\n      <Typography color=\"textSecondary\" variant=\"h6\">\n        {likes}\n      </Typography>\n      <Box ml={2} marginTop=\"2px\">\n        <IconButton\n          className={classes.likedIcon}\n          onClick={handleClick}\n          disabled={!isAuthenticated}\n        >\n          <MessageCircleIcon className={classes.commentIcon} size=\"20\" />\n        </IconButton>\n      </Box>\n      <Typography color=\"textSecondary\" variant=\"h6\">\n        {post.comments.length}\n      </Typography>\n      {user && user._id !== post.author._id && (\n        <IconButton onClick={handleOpen}>\n          <AttachMoneyIcon fontSize=\"small\" />\n        </IconButton>\n      )}\n      <Box flexGrow={1} />\n      {author && post.status === 'pending' && (\n        <Tooltip title=\"Edit\">\n          <IconButton href={'/posts/edit/' + post.slug}>\n            <EditIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n      {open && (\n        <StripeCheckout\n          open={open}\n          postId={post._id}\n          onOpen={handleOpen}\n          onSuccess={handleOpen}\n        />\n      )}\n    </div>\n  );\n};\n\nReactions.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  post: PropTypes.object.isRequired,\n  author: PropTypes.bool\n};\n\nexport default Reactions;\n","import React, { useState, FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\n// @ts-ignore\nimport { Lightbox } from 'react-modal-image';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardHeader,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport { PostWithAuthor } from 'src/types/post';\nimport Reactions from './Reactions';\nimport { Theme } from 'src/theme';\n\ninterface PostOverViewCardProps {\n  className?: string;\n  author: boolean;\n  post: PostWithAuthor;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  date: {\n    marginLeft: 6\n  },\n  media: {\n    height: 500,\n    backgroundPosition: 'top'\n  },\n  title: {\n    marginLeft: theme.spacing(5),\n    marginRight: theme.spacing(5),\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    }\n  }\n}));\n\nconst PostOverViewCard: FC<PostOverViewCardProps> = ({\n  className,\n  author,\n  post,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n\n  return (\n    <>\n      <Card className={clsx(classes.root, className)} {...rest}>\n        <CardHeader\n          avatar={\n            <Avatar\n              alt=\"Person\"\n              component={RouterLink}\n              src={typeof post.author !== 'string' && post.author.avatar}\n              to=\"#\"\n            />\n          }\n          disableTypography\n          subheader={\n            <Box display=\"flex\" alignItems=\"center\">\n              <AccessTimeIcon fontSize=\"small\" />\n              <Typography\n                variant=\"caption\"\n                color=\"textSecondary\"\n                className={classes.date}\n              >\n                {moment(post.createdAt).fromNow()}\n              </Typography>\n            </Box>\n          }\n          title={\n            <Link\n              color=\"textPrimary\"\n              component={RouterLink}\n              to=\"#\"\n              variant=\"h6\"\n            >\n              {typeof post.author !== 'string' && post.author.name}\n            </Link>\n          }\n        />\n        <Box px={3} pb={1} className={classes.title}>\n          <Link\n            color=\"textPrimary\"\n            component={RouterLink}\n            to={'/posts/public/' + post.slug}\n            variant=\"h3\"\n          >\n            {post.title}\n          </Link>\n        </Box>\n        <Box mt={2} pb={2} px={3}>\n          <Reactions post={post} author={author} />\n        </Box>\n      </Card>\n      {selectedImage && (\n        <Lightbox\n          large={selectedImage}\n          onClose={() => setSelectedImage(null)}\n        />\n      )}\n    </>\n  );\n};\n\nPostOverViewCard.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  post: PropTypes.object.isRequired,\n  author: PropTypes.bool\n};\n\nexport default PostOverViewCard;\n","import React, { useState, useEffect, FC } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  colors,\n  makeStyles,\n  Box,\n  Chip\n} from '@material-ui/core';\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {\n  Hash as HashIcon,\n  MessageCircle as MessageCircleIcon\n} from 'react-feather';\nimport axios from 'src/utils/axios';\nimport useAuth from 'src/hooks/useAuth';\nimport { Theme } from 'src/theme';\nimport { User, Status } from 'src/types/user';\n\ninterface AboutProps {\n  className?: string;\n  profile: User;\n}\n\nconst initialStatus = {\n  published: 0,\n  pending: 0,\n  comments: 0,\n  tags: 0\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  blueAvatar: {\n    backgroundColor: theme.palette.secondary.main\n  },\n  redAvatar: {\n    backgroundColor: colors.red[600]\n  },\n  cardContent: {\n    paddingTop: 0\n  }\n}));\n\nconst About: FC<AboutProps> = ({ className, profile, ...rest }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const classes = useStyles();\n  const { user } = useAuth();\n  const [status, setStatus] = useState<Status>(initialStatus);\n  const [disabled, setDisabled] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let response: any;\n\n      if (location.pathname === '/account/profile') {\n        response = await axios.get<{ user: User }>('/account/status');\n      } else {\n        response = await axios.get<{ user: User }>(\n          location.pathname + '/status'\n        );\n      }\n      setStatus(response.data.status);\n    };\n    fetchData();\n  }, [location.pathname]);\n\n  useEffect(() => {\n    const disable = user && user.email !== profile.email;\n    setDisabled(disable ?? true);\n  }, [user, profile]);\n\n  const handleClick = () => history.push('/posts/new');\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Box mt={2}>\n        <Card>\n          <CardHeader title=\"Profile Status\" />\n          <Divider />\n          <CardContent className={classes.cardContent}>\n            <List>\n              <ListItem disableGutters divider>\n                <ListItemAvatar>\n                  <Avatar className={classes.blueAvatar}>\n                    <DescriptionOutlinedIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={`${status.published} posts published`}\n                  primaryTypographyProps={{\n                    variant: 'body2',\n                    color: 'textSecondary'\n                  }}\n                />\n                {!disabled && (\n                  <Chip\n                    color=\"secondary\"\n                    size=\"small\"\n                    label=\"Contribute\"\n                    onClick={handleClick}\n                  />\n                )}\n              </ListItem>\n              <ListItem disableGutters divider>\n                <ListItemAvatar>\n                  <Avatar className={classes.blueAvatar}>\n                    <MoreHorizIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={`${status.pending} posts pending`}\n                  primaryTypographyProps={{\n                    variant: 'body2',\n                    color: 'textSecondary'\n                  }}\n                />\n              </ListItem>\n              <ListItem disableGutters divider>\n                <ListItemAvatar>\n                  <Avatar className={classes.redAvatar}>\n                    <MessageCircleIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={`${status.comments} comments written`}\n                  primaryTypographyProps={{\n                    variant: 'body2',\n                    color: 'textSecondary'\n                  }}\n                />\n              </ListItem>\n              <ListItem disableGutters divider>\n                <ListItemAvatar>\n                  <Avatar className={classes.redAvatar}>\n                    <HashIcon size={22} />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={`${status.tags} tickers followed`}\n                  primaryTypographyProps={{\n                    variant: 'body2',\n                    color: 'textSecondary'\n                  }}\n                />\n              </ListItem>\n            </List>\n          </CardContent>\n        </Card>\n      </Box>\n    </div>\n  );\n};\n\nAbout.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  profile: PropTypes.object.isRequired\n};\n\nexport default About;\n","import React, { useCallback, useEffect, useState, FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Card,\n  CardHeader,\n  Divider,\n  Box,\n  Link,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n  Button,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport { Theme } from 'src/theme';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { CommentsWithPostAndUser } from 'src/types/comment';\nimport { User } from 'src/types/user';\n\ninterface PostsProps {\n  className?: string;\n  profile: User;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  item: {\n    padding: theme.spacing(3),\n    flexGrow: 1,\n    '&:first-of-type': {\n      borderRight: `1px solid ${theme.palette.divider}`\n    }\n  },\n  comment: {\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    display: '-webkit-box',\n    '-webkit-box-orient': 'vertical',\n    '-webkit-line-clamp': '1'\n  }\n}));\n\nconst RecentComments: FC<PostsProps> = ({ className, profile, ...rest }) => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [comments, setComments] = useState<CommentsWithPostAndUser[]>([]);\n  const getComments = useCallback(async () => {\n    try {\n      const response = await axios.post<{\n        comments: CommentsWithPostAndUser[];\n      }>('/comments/get', { user: profile._id });\n\n      if (isMountedRef.current) {\n        setComments(response.data.comments);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef, profile]);\n\n  useEffect(() => {\n    getComments();\n  }, [getComments]);\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader title=\"Recent Comments\" />\n      <Divider />\n      <List disablePadding>\n        {comments.map((comment, i) => (\n          <ListItem divider={i < comments.length - 1} key={comment._id}>\n            <ListItemAvatar>\n              <Avatar alt=\"Comment Number\">{i + 1}</Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              disableTypography\n              primary={\n                <Link\n                  component={RouterLink}\n                  to={\n                    comment.post && comment.post.slug\n                      ? '/posts/public/' + comment.post.slug\n                      : '#'\n                  }\n                  color=\"textPrimary\"\n                  variant=\"body2\"\n                  className={classes.comment}\n                >\n                  {comment.comment}\n                </Link>\n              }\n              secondary={\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  {moment(comment.createdAt).fromNow()}\n                </Typography>\n              }\n            />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <Box p={2} display=\"flex\" justifyContent=\"flex-end\">\n        <Button\n          component={RouterLink}\n          size=\"small\"\n          to=\"#\"\n          endIcon={<NavigateNextIcon />}\n        >\n          See all\n        </Button>\n      </Box>\n    </Card>\n  );\n};\n\nRecentComments.propTypes = {\n  className: PropTypes.string\n};\n\nexport default RecentComments;\n","import React, { useState, useEffect, useCallback, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Grid, Box, makeStyles } from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport PostOverViewCard from 'src/components/PostOverViewCard';\nimport { PostWithAuthor } from 'src/types/post';\nimport { User } from 'src/types/user';\nimport About from './About';\nimport RecentComments from './RecentComments';\nimport useAuth from 'src/hooks/useAuth';\n\ninterface ProfileProps {\n  className?: string;\n  profile: User;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Profile: FC<ProfileProps> = ({ className, profile, ...rest }) => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const { user } = useAuth();\n  const [posts, setPosts] = useState<PostWithAuthor[]>([]);\n  const [isAuthor, setIsAuthor] = useState<boolean>(false);\n  const [page, setPage] = useState<number>(0);\n\n  const getPosts = useCallback(async () => {\n    try {\n      const params = { email: profile.email, page: page ? page : 0, user };\n      const response = await axios.post<{\n        posts: PostWithAuthor[];\n        page: number;\n        isAuthor: boolean;\n      }>('/posts/all/', params);\n\n      if (isMountedRef.current) {\n        setPosts(response.data.posts);\n        setIsAuthor(response.data.isAuthor);\n        setPage(response.data.page);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef, page, profile, user]);\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6} lg={4}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={12} lg={12}>\n              <About profile={profile} />\n            </Grid>\n            <Grid item xs={12} md={12} lg={12}>\n              <RecentComments profile={profile} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={6} lg={8}>\n          {posts.map(post => (\n            <Box mt={2} key={post._id}>\n              <PostOverViewCard post={post} author={isAuthor} />\n            </Box>\n          ))}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nProfile.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  profile: PropTypes.object.isRequired\n};\n\nexport default Profile;\n","import React, { useCallback, useState, useEffect, FC } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { Box, Container, Divider, makeStyles } from '@material-ui/core';\nimport { Theme } from 'src/theme';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Page from 'src/components/Page';\nimport { User } from 'src/types/user';\nimport Header from './Header';\nimport Profile from './Profile';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%'\n  }\n}));\n\nconst ProfileView: FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  const isMountedRef = useIsMountedRef();\n  const [profile, setProfile] = useState<User | null>(null);\n\n  const getPosts = useCallback(async () => {\n    let response: any;\n\n    try {\n      if (location.pathname === '/account/profile') {\n        response = await axios.get<{ user: User }>('/account/about');\n      } else {\n        response = await axios.get<{ user: User }>(\n          location.pathname + '/about'\n        );\n      }\n\n      if (isMountedRef.current) {\n        setProfile(response.data.user);\n      }\n    } catch (err) {\n      history.push('/404');\n    }\n  }, [isMountedRef, location.pathname, history]);\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  if (!profile) {\n    return null;\n  }\n\n  return (\n    <Page className={classes.root} title=\"Profile\">\n      <Header profile={profile} />\n      <Container maxWidth=\"lg\">\n        <Box py={3} pb={6}>\n          <Profile profile={profile} />\n        </Box>\n        <Divider />\n      </Container>\n    </Page>\n  );\n};\n\nexport default ProfileView;\n"],"sourceRoot":""}