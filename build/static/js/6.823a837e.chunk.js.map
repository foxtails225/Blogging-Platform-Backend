{"version":3,"sources":["views/auth/LoginView/JWTLogin.tsx","views/auth/LoginView/index.tsx"],"names":["useStyles","makeStyles","root","JWTLogin","className","rest","classes","login","useAuth","isMountedRef","useIsMountedRef","initialValues","email","password","submit","validationSchema","Yup","shape","max","required","onSubmit","values","a","setErrors","setStatus","setSubmitting","current","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","clsx","TextField","error","Boolean","fullWidth","autoFocus","helperText","label","margin","name","onBlur","onChange","type","value","variant","Box","mt","FormHelperText","Button","color","disabled","size","theme","backgroundColor","palette","background","dark","display","flexDirection","minHeight","banner","paper","paddingBottom","spacing","paddingTop","borderBottom","divider","bannerChip","marginRight","methodIcon","height","marginLeft","cardContainer","cardContent","padding","LoginView","method","Page","title","Container","maxWidth","mb","justifyContent","to","Logo","Card","CardContent","alignItems","Typography","gutterBottom","flexGrow","my","Divider","Link","component","RouterLink"],"mappings":"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","file":"static/js/6.823a837e.chunk.js","sourcesContent":["import React from 'react';\nimport type { FC } from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  FormHelperText,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport useAuth from 'src/hooks/useAuth';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\ninterface JWTLoginProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst JWTLogin: FC<JWTLoginProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { login } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().max(255).required('Password is required')\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await login(values.email, values.password);\n\n          if (isMountedRef.current) {\n            setStatus({ success: true });\n            setSubmitting(false);\n          }\n        } catch (err) {\n          if (isMountedRef.current) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          noValidate\n          onSubmit={handleSubmit}\n          className={clsx(classes.root, className)}\n          {...rest}\n        >\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            autoFocus\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          {errors.submit && (\n            <Box mt={3}>\n              <FormHelperText error>\n                {errors.submit}\n              </FormHelperText>\n            </Box>\n          )}\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Log In\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nJWTLogin.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default JWTLogin;\n","import React from 'react';\nimport type { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Container,\n  Divider,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport type { Theme } from 'src/theme';\nimport Page from 'src/components/Page';\nimport Logo from 'src/components/Logo';\nimport useAuth from 'src/hooks/useAuth';\nimport JWTLogin from './JWTLogin';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh'\n  },\n  banner: {\n    backgroundColor: theme.palette.background.paper,\n    paddingBottom: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n    borderBottom: `1px solid ${theme.palette.divider}`\n  },\n  bannerChip: {\n    marginRight: theme.spacing(2)\n  },\n  methodIcon: {\n    height: 30,\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2)\n  },\n  cardContainer: {\n    paddingBottom: 80,\n    paddingTop: 80,\n  },\n  cardContent: {\n    padding: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: 400\n  },\n}));\n\nconst LoginView: FC = () => {\n  const classes = useStyles();\n  const { method } = useAuth();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Login\"\n    >\n      <Container\n        className={classes.cardContainer}\n        maxWidth=\"sm\"\n      >\n        <Box\n          mb={8}\n          display=\"flex\"\n          justifyContent=\"center\"\n        >\n          <RouterLink to=\"/\">\n            <Logo />\n          </RouterLink>\n        </Box>\n        <Card>\n          <CardContent className={classes.cardContent}>\n            <Box\n              alignItems=\"center\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              mb={3}\n            >\n              <div>\n                <Typography\n                  color=\"textPrimary\"\n                  gutterBottom\n                  variant=\"h2\"\n                >\n                  Sign in\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                >\n                  Sign in on the internal platform\n                </Typography>\n              </div>\n            </Box>\n            <Box\n              flexGrow={1}\n              mt={3}\n            >\n              {method === 'JWT' && <JWTLogin /> }\n            </Box>\n            <Box my={3}>\n              <Divider />\n            </Box>\n            <Link\n              component={RouterLink}\n              to=\"/register\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              Create new account\n            </Link>\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n};\n\nexport default LoginView;\n"],"sourceRoot":""}