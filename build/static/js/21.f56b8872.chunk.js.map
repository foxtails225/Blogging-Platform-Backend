{"version":3,"sources":["utils/getInitials.ts","components/GenericMoreButton.tsx","components/Label.tsx","views/admin/AdminView/Overview/Posts/CustomForm.tsx","views/admin/AdminView/Overview/Posts/StatusModal.tsx","views/admin/AdminView/Overview/Posts/index.tsx","views/admin/AdminView/Overview/Users/StatusModal.tsx","views/admin/AdminView/Overview/Users/index.tsx","views/admin/AdminView/Overview/Comments/FlagItem.tsx","views/admin/AdminView/Overview/Comments/index.tsx","views/admin/AdminView/Overview/index.tsx","views/admin/AdminView/Payment/index.tsx","views/admin/AdminView/Announcement/index.tsx","views/admin/AdminView/index.tsx"],"names":["getInitials","name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","menu","width","maxWidth","memo","props","classes","moreRef","useRef","useState","openMenu","setOpenMenu","title","onClick","ref","fontSize","anchorEl","current","anchorOrigin","vertical","horizontal","onClose","open","PaperProps","className","transformOrigin","primary","theme","root","fontFamily","typography","alignItems","borderRadius","display","flexGrow","whiteSpace","cursor","flexShrink","pxToRem","fontWeight","fontWeightMedium","height","justifyContent","letterSpacing","minWidth","padding","spacing","textTransform","color","palette","main","backgroundColor","fade","secondary","error","success","warning","Label","children","rest","style","clsx","CustomForm","postId","onOpen","onSuccess","user","useAuth","amount","setAmount","author","setAuthor","useEffect","a","axios","get","response","data","post","fetchData","handleSubmit","params","stripeId","_id","type","client","fee","handleClose","Dialog","keepMounted","aria-labelledby","fullWidth","DialogContent","Grid","container","justify","item","md","TextField","label","defaultValue","email","InputProps","readOnly","onChange","event","target","value","startAdornment","InputAdornment","position","DialogActions","Button","buttons","text","toggleBtn","common","white","StatusModal","onFetch","status","setStatus","reason","setValue","openForm","setOpenForm","updateStatus","put","handleConfirm","handleForm","DialogTitle","ToggleButtonGroup","exclusive","size","newAlignment","aria-label","idx","ToggleButton","key","margin","disabled","labelColors","approved","pending","rejected","columns","initialStatus","page","limit","count","order","orderBy","Posts","setOpen","modal","setModal","posts","setPosts","getPosts","sortBy","prevState","socket","on","createSortHandler","currentTarget","id","Card","CardHeader","action","GenericMoreButton","Divider","Box","Table","TableHead","TableRow","column","TableCell","align","TableSortLabel","active","direction","TableBody","hover","Link","component","RouterLink","to","slug","variant","numeral","format","moment","createdAt","TablePagination","rowsPerPageOptions","rowsPerPage","onChangePage","onChangeRowsPerPage","parseInt","p","banned","setBanned","xs","Boolean","DateTimePicker","inputVariant","date","Users","users","setUsers","getUsers","Avatar","alt","src","avatar","ml","role","viewButton","marginLeft","FlagItem","flag","history","useHistory","ListItem","ListItemText","push","from","comment","underline","FLAG_OPTIONS","find","primaryTypographyProps","noWrap","description","fromNow","Tooltip","TeamTasks","isMountedRef","useIsMountedRef","flags","setFlags","getFlags","useCallback","console","List","i","divider","length","Overview","lg","xl","Comments","Payment","profile","setCount","transactions","setTransactions","getData","handleRefund","transaction","paymentId","payment_intent","charAt","toLowerCase","refund","newPage","types","control","marginBottom","inputContainer","paddingBottom","paddingLeft","paddingRight","paddingTop","breakpoints","down","box","flexWrap","Announcement","enqueueSnackbar","useSnackbar","enableReinitialize","initialValues","alert","alertType","alertChecked","submit","validationSchema","Yup","shape","required","onSubmit","values","setErrors","setSubmitting","message","errors","handleChange","isSubmitting","FormControl","InputLabel","Select","MenuItem","mr","Switch","checked","Paper","Input","disableUnderline","multiline","rows","IconButton","mt","FormHelperText","tabs","background","dark","minHeight","AdminView","currentTab","setCurrentTab","setProfile","Page","Container","Tabs","scrollButtons","textColor","tab","Tab","py","pb"],"mappings":"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","file":"static/js/21.f56b8872.chunk.js","sourcesContent":["const getInitials = (name: string = '') => {\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ')\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase())\n    .join('');\n};\n\nexport default getInitials;\n","import React, {\n  useRef,\n  useState,\n  memo\n} from 'react';\nimport type { FC } from 'react';\nimport {\n  ListItemIcon,\n  ListItemText,\n  Tooltip,\n  IconButton,\n  Menu,\n  MenuItem,\n  makeStyles\n} from '@material-ui/core';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport ArchiveIcon from '@material-ui/icons/ArchiveOutlined';\n\nconst useStyles = makeStyles(() => ({\n  menu: {\n    width: 256,\n    maxWidth: '100%'\n  }\n}));\n\nconst GenericMoreButton: FC = (props) => {\n  const classes = useStyles();\n  const moreRef = useRef<any>(null);\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\n\n  const handleMenuOpen = (): void => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = (): void => {\n    setOpenMenu(false);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"More options\">\n        <IconButton\n          onClick={handleMenuOpen}\n          ref={moreRef}\n          {...props}\n        >\n          <MoreIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n      <Menu\n        anchorEl={moreRef.current}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left'\n        }}\n        onClose={handleMenuClose}\n        open={openMenu}\n        PaperProps={{ className: classes.menu }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left'\n        }}\n      >\n        <MenuItem>\n          <ListItemIcon>\n            <GetAppIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Import\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <FileCopyIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Copy\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <PictureAsPdfIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Export\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <ArchiveIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Archive\" />\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default memo(GenericMoreButton);\n","import React from 'react';\nimport type { FC, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, makeStyles } from '@material-ui/core';\nimport type { Theme } from 'src/theme'; \n\ninterface LabelProps {\n  className?: string;\n  color?: 'primary' | 'secondary' | 'error' | 'warning' | 'success';\n  children?: ReactNode;\n  style?: {};\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    fontFamily: theme.typography.fontFamily,\n    alignItems: 'center',\n    borderRadius: 2,\n    display: 'inline-flex',\n    flexGrow: 0,\n    whiteSpace: 'nowrap',\n    cursor: 'default',\n    flexShrink: 0,\n    fontSize: theme.typography.pxToRem(12),\n    fontWeight: theme.typography.fontWeightMedium,\n    height: 20,\n    justifyContent: 'center',\n    letterSpacing: 0.5,\n    minWidth: 20,\n    padding: theme.spacing(0.5, 1),\n    textTransform: 'uppercase'\n  },\n  primary: {\n    color: theme.palette.primary.main,\n    backgroundColor: fade(theme.palette.primary.main, 0.08)\n  },\n  secondary: {\n    color: theme.palette.secondary.main,\n    backgroundColor: fade(theme.palette.secondary.main, 0.08)\n  },\n  error: {\n    color: theme.palette.error.main,\n    backgroundColor: fade(theme.palette.error.main, 0.08)\n  },\n  success: {\n    color: theme.palette.success.main,\n    backgroundColor: fade(theme.palette.success.main, 0.08)\n  },\n  warning: {\n    color: theme.palette.warning.main,\n    backgroundColor: fade(theme.palette.warning.main, 0.08)\n  }\n}));\n\nconst Label: FC<LabelProps> = ({\n  className = '',\n  color = 'secondary',\n  children,\n  style,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <span\n      className={\n        clsx(classes.root, {\n          [classes[color]]: color\n        }, className)\n      }\n      {...rest}\n    >\n      {children}\n    </span>\n  );\n};\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  color: PropTypes.oneOf(['primary', 'secondary', 'error', 'warning', 'success'])\n};\n\nexport default Label;\n","import React, { FC, useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogActions,\r\n  InputAdornment,\r\n  Button,\r\n  makeStyles,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport { Theme } from 'src/theme';\r\nimport { User } from 'src/types/user';\r\nimport axios from 'src/utils/axios';\r\nimport { PostWithAuthor } from 'src/types/post';\r\nimport useAuth from 'src/hooks/useAuth';\r\n\r\ninterface CustomFormProps {\r\n  className?: string;\r\n  open: boolean;\r\n  postId: string;\r\n  onOpen: () => void;\r\n  onSuccess: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {}\r\n}));\r\n\r\nconst CustomForm: FC<CustomFormProps> = ({\r\n  className,\r\n  postId,\r\n  open,\r\n  onOpen,\r\n  onSuccess,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const { user } = useAuth();\r\n  const [amount, setAmount] = useState<number>();\r\n  const [author, setAuthor] = useState<User>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await axios.get<{ post: PostWithAuthor }>(\r\n        '/posts/getById/' + postId\r\n      );\r\n\r\n      if (response.data) {\r\n        setAuthor(response.data.post.author);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [postId]);\r\n\r\n  const handleSubmit = async () => {\r\n    const params = {\r\n      stripeId: author.stripeId,\r\n      author: author._id,\r\n      type: 'payment_success',\r\n      amount\r\n    };\r\n    const response = await axios.post<{ secret: string }>(\r\n      '/stripe/transfer',\r\n      params\r\n    );\r\n\r\n    await axios.post('/transactions/create', {\r\n      user: author._id,\r\n      client: user._id,\r\n      amount: amount,\r\n      fee: 0,\r\n      type: 'post_approved'\r\n    });\r\n    if (response.data) {\r\n      onSuccess();\r\n    }\r\n  };\r\n\r\n  const handleChange = event => setAmount(event.target.value);\r\n\r\n  const handleClose = () => onOpen();\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      {author && (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"checkform-dialog\"\r\n          fullWidth\r\n        >\r\n          <DialogContent>\r\n            <Grid container justify=\"center\">\r\n              <Grid item md={5}>\r\n                <TextField\r\n                  label=\"Email\"\r\n                  defaultValue={author.email}\r\n                  InputProps={{\r\n                    readOnly: true\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item md={5}>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  onChange={handleChange}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">$</InputAdornment>\r\n                    )\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleSubmit} color=\"primary\">\r\n              Confirm\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomForm.propTypes = {\r\n  className: PropTypes.string,\r\n  //@ts-ignore\r\n  open: PropTypes.bool,\r\n  onOpen: PropTypes.func,\r\n  onSuccess: PropTypes.func\r\n};\r\n\r\nexport default CustomForm;\r\n","import React, { FC, ChangeEvent, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport axios from 'src/utils/axios';\r\nimport { Theme } from 'src/theme';\r\nimport { Post, PostStatus } from 'src/types/post';\r\nimport CustomForm from './CustomForm';\r\n\r\ninterface Modal {\r\n  _id: string;\r\n  status: PostStatus;\r\n  reason: string;\r\n}\r\n\r\ninterface StatusProps {\r\n  className?: string;\r\n  open: boolean;\r\n  data: Modal;\r\n  onOpen: (value?: any) => void;\r\n  onFetch: () => void;\r\n}\r\n\r\ninterface Status {\r\n  name: PostStatus;\r\n  text: string;\r\n}\r\n\r\nconst buttons: Status[] = [\r\n  { name: 'pending', text: 'pending' },\r\n  { name: 'approved', text: 'approve' },\r\n  { name: 'rejected', text: 'reject' }\r\n];\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  toggleBtn: {\r\n    '&.MuiToggleButton-root': {\r\n      color: theme.palette.text.primary\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette.secondary.main,\r\n      color: theme.palette.common.white\r\n    }\r\n  }\r\n}));\r\n\r\nconst StatusModal: FC<StatusProps> = ({\r\n  open,\r\n  data,\r\n  onOpen,\r\n  onFetch,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const [status, setStatus] = useState<string>(data.status);\r\n  const [value, setValue] = useState<string>(data.reason);\r\n  const [openForm, setOpenForm] = useState<boolean>(false);\r\n\r\n  const updateStatus = async () => {\r\n    const params = { _id: data._id, status, reason: value };\r\n    await axios.put<{ post: Post }>('/posts/update/status', params);\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n    onOpen();\r\n\r\n    if (status === 'approved') {\r\n      setOpenForm(!openForm);\r\n    } else {\r\n      updateStatus();\r\n      onFetch();\r\n    }\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newAlignment: string | null\r\n  ) => {\r\n    setStatus(newAlignment);\r\n  };\r\n\r\n  const handleClose = () => onOpen();\r\n\r\n  const handleForm = () => setOpenForm(!openForm);\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    updateStatus();\r\n    handleForm();\r\n    onFetch();\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      {open && (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          onClose={handleClose}\r\n          aria-labelledby=\"status-dialog\"\r\n        >\r\n          <DialogTitle>Post Status</DialogTitle>\r\n          <DialogContent>\r\n            <ToggleButtonGroup\r\n              value={status}\r\n              exclusive\r\n              size=\"small\"\r\n              onChange={handleClick}\r\n              aria-label=\"text alignment\"\r\n            >\r\n              {buttons.map((item: Status, idx: number) => (\r\n                <ToggleButton\r\n                  key={item.name + idx}\r\n                  value={item.name}\r\n                  className={classes.toggleBtn}\r\n                >\r\n                  {item.text}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n            <TextField\r\n              value={value}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleConfirm}\r\n              disabled={status === data.status}\r\n              color=\"primary\"\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n      {openForm && (\r\n        <CustomForm\r\n          open={openForm}\r\n          postId={data._id}\r\n          onOpen={handleForm}\r\n          onSuccess={handleSuccess}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nStatusModal.propTypes = {\r\n  className: PropTypes.string,\r\n  //@ts-ignore\r\n  data: PropTypes.object,\r\n  open: PropTypes.bool,\r\n  onOpen: PropTypes.func,\r\n  onFetch: PropTypes.func\r\n};\r\n\r\nexport default StatusModal;\r\n","import React, { FC, ChangeEvent, useEffect, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TablePagination,\n  makeStyles\n} from '@material-ui/core';\nimport Label from 'src/components/Label';\nimport { Theme } from 'src/theme';\nimport axios from 'src/utils/axios';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport { PostWithAuthor, PostStatus } from 'src/types/post';\nimport StatusModal from './StatusModal';\nimport { socket } from 'src/constants';\n\ninterface PostsProps {\n  className?: string;\n}\n\ntype OrderByStatus = 'desc' | 'asc';\n\ninterface Status {\n  page: number;\n  limit: number;\n  count: number;\n  order: string;\n  orderBy: OrderByStatus;\n}\n\ninterface Modal {\n  _id: string;\n  status: PostStatus;\n  reason: string;\n}\n\nconst labelColors: Record<PostStatus, 'success' | 'warning' | 'error'> = {\n  approved: 'success',\n  pending: 'warning',\n  rejected: 'error'\n};\n\nconst columns = [\n  { name: 'title', value: 'Title' },\n  { name: 'author', value: 'Author' },\n  { name: 'total', value: 'Total' },\n  { name: 'status', value: 'Status' },\n  { name: 'createdAt', value: 'Date' }\n];\n\nconst initialStatus: Status = {\n  page: 0,\n  limit: 5,\n  count: 0,\n  order: 'createdAt',\n  orderBy: 'desc'\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {}\n}));\n\nconst Posts: FC<PostsProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState<boolean>(false);\n  const [modal, setModal] = useState<Modal>(null);\n  const [status, setStatus] = useState<Status>(initialStatus);\n  const [posts, setPosts] = useState<PostWithAuthor[]>([]);\n\n  const getPosts = async () => {\n    try {\n      const sortBy = { [status.order]: status.orderBy === 'desc' ? -1 : 1 };\n      const params = { page: status.page, sortBy, limit: status.limit };\n      const response = await axios.post<{\n        posts: PostWithAuthor[];\n        count: number;\n      }>('/admin/posts/all/', params);\n\n      setPosts(response.data.posts);\n      setStatus(prevState => ({ ...prevState, count: response.data.count }));\n    } catch (err) {\n      setStatus(initialStatus);\n      setPosts([]);\n    }\n  };\n\n  useEffect(() => {\n    getPosts();\n    socket.on('adminPost', data => {\n      getPosts();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status.page, status.limit, status.order, status.orderBy]);\n\n  const createSortHandler = (event): void => {\n    const order = event.currentTarget.id;\n    const orderBy = status.orderBy !== 'desc' ? 'desc' : 'asc';\n    setStatus(prevState => ({ ...prevState, order, orderBy }));\n  };\n\n  const handleChangePage = (event: unknown, page: number) => {\n    setStatus(prevState => ({ ...prevState, page }));\n  };\n\n  const handleSortDirection = (name: string): OrderByStatus => {\n    const direction =\n      status.order === name && status.orderBy ? status.orderBy : 'desc';\n    return direction;\n  };\n\n  const handleChangeLimit = (event: ChangeEvent<HTMLInputElement>): void => {\n    const limit = parseInt(event.target.value, 10);\n    setStatus(prevState => ({ ...prevState, limit, page: 0 }));\n  };\n\n  const handleStatus = (data: PostWithAuthor) => {\n    setModal({ _id: data._id, status: data.status, reason: data.reason });\n    setOpen(!open);\n  };\n\n  const handleOpen = () => setOpen(!open);\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader action={<GenericMoreButton />} title=\"All Posts\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {columns.map(column => (\n                  <TableCell key={column.name} align=\"center\">\n                    <TableSortLabel\n                      id={column.name}\n                      active={status.order === column.name}\n                      onClick={createSortHandler}\n                      direction={handleSortDirection(column.name)}\n                      disabled={column.name === 'no'}\n                    >\n                      {column.value}\n                    </TableSortLabel>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {posts.map(post => (\n                <TableRow hover key={post._id}>\n                  <TableCell align=\"center\">\n                    {post.status !== 'pending' ? (\n                      <Link\n                        color=\"textPrimary\"\n                        component={RouterLink}\n                        to={'/posts/public/' + post.slug}\n                        variant=\"body2\"\n                      >\n                        {post.title}\n                      </Link>\n                    ) : (\n                      <Link\n                        color=\"textPrimary\"\n                        component={RouterLink}\n                        to={'/posts/edit/' + post.slug}\n                        variant=\"body2\"\n                      >\n                        {post.title}\n                      </Link>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Link\n                      color=\"textPrimary\"\n                      component={RouterLink}\n                      to={'/users/' + post.author.name}\n                      variant=\"body2\"\n                    >\n                      {post.author.name}\n                    </Link>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {numeral(0).format(`$0,0.00`)}\n                  </TableCell>\n                  <TableCell align=\"center\" onClick={() => handleStatus(post)}>\n                    <Label color={labelColors[post.status]}>\n                      {post.status}\n                    </Label>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {moment(post.createdAt).format('DD MMM, YYYY hh:mm:ss')}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={status.count}\n            rowsPerPage={status.limit}\n            page={status.page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeLimit}\n          />\n        </Box>\n      </PerfectScrollbar>\n      <Box p={2} display=\"flex\" justifyContent=\"flex-end\" />\n      {modal && (\n        <StatusModal\n          open={open}\n          data={modal}\n          onOpen={handleOpen}\n          onFetch={getPosts}\n        />\n      )}\n    </Card>\n  );\n};\n\nPosts.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Posts;\n","import React, { FC, ChangeEvent, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport axios from 'src/utils/axios';\r\nimport { Theme } from 'src/theme';\r\nimport { User } from 'src/types/user';\r\n\r\ninterface Modal {\r\n  _id: string;\r\n  status: boolean;\r\n  banned: Date;\r\n  reason: string;\r\n}\r\n\r\ninterface StatusProps {\r\n  className?: string;\r\n  open: boolean;\r\n  data: Modal;\r\n  onOpen: () => void;\r\n  onFetch: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  toggleBtn: {\r\n    '&.MuiToggleButton-root': {\r\n      color: theme.palette.text.primary\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette.secondary.main,\r\n      color: theme.palette.common.white\r\n    }\r\n  }\r\n}));\r\n\r\nconst StatusModal: FC<StatusProps> = ({\r\n  open,\r\n  data,\r\n  onOpen,\r\n  onFetch,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const [status, setStatus] = useState<boolean>(data.status);\r\n  const [value, setValue] = useState<string>(data.reason);\r\n  const [banned, setBanned] = useState<Date>(data.banned);\r\n\r\n  const handleConfirm = async () => {\r\n    const params = { _id: data._id, status, reason: value, banned };\r\n    await axios.put<{ user: User }>('/users/update/status', params);\r\n    onFetch();\r\n    onOpen();\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newAlignment: string | null\r\n  ) => {\r\n    setStatus(Boolean(newAlignment));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onOpen();\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handlePicker = date => {\r\n    setBanned(date);\r\n  };\r\n  \r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Dialog\r\n        open={open}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"status-dialog\"\r\n      >\r\n        <DialogTitle>User Status</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container justify=\"center\">\r\n            <Grid item md={5} xs={12}>\r\n              <ToggleButtonGroup\r\n                value={status}\r\n                exclusive\r\n                size=\"small\"\r\n                onChange={handleClick}\r\n                aria-label=\"user alignment\"\r\n              >\r\n                <ToggleButton value={true} className={classes.toggleBtn}>\r\n                  Active\r\n                </ToggleButton>\r\n                <ToggleButton value={false} className={classes.toggleBtn}>\r\n                  Block\r\n                </ToggleButton>\r\n              </ToggleButtonGroup>\r\n            </Grid>\r\n            <Grid item md={7} xs={12}>\r\n              <DateTimePicker\r\n                fullWidth\r\n                inputVariant=\"standard\"\r\n                label=\"Date\"\r\n                name=\"banned\"\r\n                onChange={handlePicker}\r\n                value={banned}\r\n              />\r\n            </Grid>\r\n            <Grid item md={12} xs={12}>\r\n              <TextField\r\n                value={value}\r\n                margin=\"dense\"\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirm}\r\n            color=\"primary\"\r\n            disabled={!status && !banned}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatusModal.propTypes = {\r\n  className: PropTypes.string,\r\n  //@ts-ignore\r\n  data: PropTypes.object,\r\n  open: PropTypes.bool,\r\n  onOpen: PropTypes.func,\r\n  onFetch: PropTypes.func\r\n};\r\n\r\nexport default StatusModal;\r\n","import React, { FC, ChangeEvent, useEffect, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TablePagination,\n  makeStyles\n} from '@material-ui/core';\nimport Label from 'src/components/Label';\nimport getInitials from 'src/utils/getInitials';\nimport { Theme } from 'src/theme';\nimport axios from 'src/utils/axios';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport { User } from 'src/types/user';\nimport StatusModal from './StatusModal';\n\ninterface UsersProps {\n  className?: string;\n}\n\ntype OrderByStatus = 'desc' | 'asc';\n\ninterface Status {\n  page: number;\n  limit: number;\n  count: number;\n  order: string;\n  orderBy: OrderByStatus;\n}\n\ninterface Modal {\n  _id: string;\n  status: boolean;\n  banned: Date;\n  reason: string;\n}\n\nconst columns = [\n  { name: 'name', value: 'Name' },\n  { name: 'email', value: 'Email' },\n  { name: 'role', value: 'Role' },\n  { name: 'status', value: 'Status' },\n  { name: 'createdAt', value: 'Date' }\n];\n\nconst initialStatus: Status = {\n  page: 0,\n  limit: 5,\n  count: 0,\n  order: 'createdAt',\n  orderBy: 'desc'\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {}\n}));\n\nconst Users: FC<UsersProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState<boolean>(false);\n  const [modal, setModal] = useState<Modal>();\n  const [status, setStatus] = useState<Status>(initialStatus);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const getUsers = async () => {\n    try {\n      const sortBy = { [status.order]: status.orderBy === 'desc' ? -1 : 1 };\n      const params = { page: status.page, sortBy, limit: status.limit };\n      const response = await axios.post<{\n        users: User[];\n        count: number;\n      }>('/admin/users/all/', params);\n\n      setUsers(response.data.users);\n      setStatus(prevState => ({ ...prevState, count: response.data.count }));\n    } catch (err) {\n      setStatus(initialStatus);\n      setUsers([]);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status.page, status.limit, status.order, status.orderBy]);\n\n  const createSortHandler = (event): void => {\n    const order = event.currentTarget.id;\n    const orderBy = status.orderBy !== 'desc' ? 'desc' : 'asc';\n    setStatus(prevState => ({ ...prevState, order, orderBy }));\n  };\n\n  const handleChangePage = (event: unknown, page: number) => {\n    setStatus(prevState => ({ ...prevState, page }));\n  };\n\n  const handleSortDirection = (name: string): OrderByStatus => {\n    const direction =\n      status.order === name && status.orderBy ? status.orderBy : 'desc';\n    return direction;\n  };\n\n  const handleChangeLimit = (event: ChangeEvent<HTMLInputElement>): void => {\n    const limit = parseInt(event.target.value, 10);\n    setStatus(prevState => ({ ...prevState, limit, page: 0 }));\n  };\n\n  const handleStatus = (data: User) => {\n    setModal({\n      _id: data._id,\n      status: data.status,\n      reason: data.reason,\n      banned: data.banned\n    });\n    setOpen(!open);\n  };\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader action={<GenericMoreButton />} title=\"All Users\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {columns.map(column => (\n                  <TableCell key={column.name} align=\"center\">\n                    <TableSortLabel\n                      id={column.name}\n                      active={status.order === column.name}\n                      onClick={createSortHandler}\n                      direction={handleSortDirection(column.name)}\n                      disabled={column.name === 'no'}\n                    >\n                      {column.value}\n                    </TableSortLabel>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {users.map(user => (\n                <TableRow hover key={user._id}>\n                  <TableCell>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <Avatar\n                        alt=\"Author\"\n                        src={user.avatar}\n                        component={RouterLink}\n                        to={'/users/' + user.name}\n                      >\n                        {getInitials(user.name)}\n                      </Avatar>\n                      <Box ml={1}>\n                        <Link\n                          color=\"textPrimary\"\n                          component={RouterLink}\n                          to={'/users/' + user.name}\n                          variant=\"body2\"\n                        >\n                          {user.name}\n                        </Link>\n                      </Box>\n                    </Box>\n                  </TableCell>\n                  <TableCell align=\"center\">{user.email}</TableCell>\n                  <TableCell align=\"center\">{user.role}</TableCell>\n                  <TableCell align=\"center\" onClick={() => handleStatus(user)}>\n                    <Label color={user.status ? 'success' : 'error'}>\n                      {user.status ? 'Active' : 'Banned'}\n                    </Label>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {moment(user.createdAt).format('DD MMM, YYYY hh:mm:ss')}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={status.count}\n            rowsPerPage={status.limit}\n            page={status.page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeLimit}\n          />\n        </Box>\n      </PerfectScrollbar>\n      <Box p={2} display=\"flex\" justifyContent=\"flex-end\" />\n      {open && (\n        <StatusModal\n          open={open}\n          data={modal}\n          onOpen={handleOpen}\n          onFetch={getUsers}\n        />\n      )}\n    </Card>\n  );\n};\n\nUsers.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Users;\n","import React, { FC } from 'react';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport {\n  Avatar,\n  Link,\n  ListItem,\n  ListItemProps,\n  ListItemText,\n  Tooltip,\n  makeStyles\n} from '@material-ui/core';\nimport { Theme } from 'src/theme';\nimport { FlagWithUserAndPost } from 'src/types/flag';\nimport { FLAG_OPTIONS } from 'src/constants';\n\ninterface FlagItemProps extends ListItemProps {\n  className?: string;\n  flag: FlagWithUserAndPost;\n  button?: any; // Fix warning\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  viewButton: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nconst FlagItem: FC<FlagItemProps> = ({ className, flag, ...rest }) => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleClick = (): void =>\n    history.push('/posts/public/' + flag.post.slug, {\n      from: 'admin',\n      comment: flag.comment\n    });\n\n  return (\n    <ListItem className={clsx(classes.root, className)} {...rest}>\n      <ListItemText\n        primary={\n          <Link\n            color=\"textPrimary\"\n            onClick={handleClick}\n            underline=\"none\"\n            variant=\"h6\"\n          >\n            {FLAG_OPTIONS.find(item => item.name === flag.reason)?.label}\n          </Link>\n        }\n        primaryTypographyProps={{ variant: 'h6', noWrap: true }}\n        secondary={\n          <>\n            {flag.description && flag.description !== '' && (\n              <>\n                {flag.description}\n                <br />\n              </>\n            )}\n            {moment(flag.createdAt).fromNow()}\n          </>\n        }\n      />\n      <Tooltip key={flag.user._id} title=\"View Profile\">\n        <Avatar\n          src={flag.user.avatar}\n          alt=\"Person\"\n          component={RouterLink}\n          to={'/users/' + flag.user.name}\n        />\n      </Tooltip>\n    </ListItem>\n  );\n};\n\nFlagItem.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  flag: PropTypes.object.isRequired\n};\n\nexport default FlagItem;\n","import React, { FC, useCallback, useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  List,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport { FlagWithUserAndPost } from 'src/types/flag';\nimport FlagItem from './FlagItem';\nimport { socket } from 'src/constants';\n\ninterface TeamTasksProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst TeamTasks: FC<TeamTasksProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [flags, setFlags] = useState<FlagWithUserAndPost[]>([]);\n\n  const getFlags = useCallback(async () => {\n    try {\n      const response = await axios.get<{ flags: FlagWithUserAndPost[] }>(\n        '/comments/flagsAll'\n      );\n\n      if (isMountedRef.current) {\n        setFlags(response.data.flags);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getFlags();\n    socket.on('adminComment', data => {\n      getFlags();\n    });\n  }, [getFlags]);\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader action={<GenericMoreButton />} title=\"Reports\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={400}>\n          <List>\n            {flags.map((flag, i) => (\n              <FlagItem\n                divider={i < flags.length - 1}\n                key={flag._id}\n                flag={flag}\n              />\n            ))}\n          </List>\n        </Box>\n      </PerfectScrollbar>\n    </Card>\n  );\n};\n\nTeamTasks.propTypes = {\n  className: PropTypes.string\n};\n\nexport default TeamTasks;\n","import React, { FC } from 'react';\nimport { Grid } from '@material-ui/core';\nimport Posts from './Posts';\nimport Users from './Users';\n// import NewProjects from './NewPosts';\n// import TotalIncome from './TotalIncome';\n// import SystemHealth from './SystemHealth';\nimport Comments from './Comments';\n// import NewSubscriber from './NewSubscriber';\n\nconst Overview: FC = () => (\n  <Grid container spacing={3}>\n    {/* <Grid item lg={3} sm={6} xs={12}>\n      <NewSubscriber />\n    </Grid>\n    <Grid item lg={3} sm={6} xs={12}>\n      <NewProjects />\n    </Grid>\n    <Grid item lg={3} sm={6} xs={12}>\n      <SystemHealth />\n    </Grid>\n    <Grid item lg={3} sm={6} xs={12}>\n      <TotalIncome />\n    </Grid> */}\n    <Grid item lg={12} xl={12} xs={12}>\n      <Posts />\n    </Grid>\n    <Grid item lg={4} xl={4} xs={12}>\n      <Comments />\n    </Grid>\n    <Grid item lg={8} xl={8} xs={12}>\n      <Users />\n    </Grid>\n  </Grid>\n);\n\nexport default Overview;\n","import React, { FC, useEffect, useState, ChangeEvent } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TablePagination,\n  makeStyles,\n  Link\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport { User } from 'src/types/user';\nimport useAuth from 'src/hooks/useAuth';\nimport { Theme } from 'src/theme';\nimport { TransactionWithClient } from 'src/types/transaction';\nimport { socket } from 'src/constants';\n\ninterface PaymentProps {\n  className?: string;\n  profile: User;\n}\n\ntype OrderByStatus = 'desc' | 'asc';\n\ninterface Status {\n  page: number;\n  limit: number;\n  order: string;\n  orderBy: OrderByStatus;\n}\n\nconst columns = [\n  { name: 'no', value: 'No' },\n  { name: 'createdAt', value: 'Date' },\n  { name: 'status', value: 'Status' },\n  { name: 'type', value: 'Type' },\n  { name: 'client', value: 'Client' },\n  { name: 'amount', value: 'Initial Pyament' },\n  { name: 'fee', value: 'Fee' },\n  { name: 'income', value: 'Net Income' },\n  { name: 'refund', value: '' }\n];\n\nconst initialStatus: Status = {\n  page: 0,\n  limit: 5,\n  order: 'createdAt',\n  orderBy: 'desc'\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  action: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst Payment: FC<PaymentProps> = ({ className, profile, ...rest }) => {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const [count, setCount] = useState<number>(0);\n  const [status, setStatus] = useState<Status>(initialStatus);\n  const [transactions, setTransactions] = useState<TransactionWithClient[]>([]);\n\n  const getData = async () => {\n    try {\n      const sortBy = { [status.order]: status.orderBy === 'desc' ? -1 : 1 };\n      const params = { page: status.page, sortBy, limit: status.limit, user };\n      const response = await axios.post<{\n        transactions: TransactionWithClient[];\n        count: number;\n      }>('/admin/refunds', params);\n\n      setTransactions(response.data.transactions);\n      setCount(response.data.count);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n    socket.on('requestRefund', data => {\n      getData();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status, user]);\n\n  const createSortHandler = (event): void => {\n    const { id } = event.currentTarget;\n    const value = status.orderBy !== 'desc' ? 'desc' : 'asc';\n    setStatus(prevState => ({\n      ...prevState,\n      order: id,\n      orderBy: value\n    }));\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) =>\n    setStatus(prevState => ({ ...prevState, page: newPage }));\n\n  const handleSortDirection = (name: string): OrderByStatus => {\n    const direction =\n      status.order === name && status.orderBy ? status.orderBy : 'desc';\n    return direction;\n  };\n\n  const handleChangeLimit = (event: ChangeEvent<HTMLInputElement>): void => {\n    setStatus(prevState => ({\n      ...prevState,\n      limit: parseInt(event.target.value, 10),\n      page: 0\n    }));\n  };\n\n  const handleRefund = async (transaction: TransactionWithClient) => {\n    const { _id, paymentId, user } = transaction;\n    const params = { _id, payment_intent: paymentId, user };\n    await axios.post('/stripe/refund/', params);\n    getData();\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader\n        classes={{ action: classes.action }}\n        title=\"Latest Refund Transactions\"\n      />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {columns.map(column => (\n                  <TableCell key={column.name} align=\"center\">\n                    <TableSortLabel\n                      id={column.name}\n                      active={status.order === column.name}\n                      onClick={createSortHandler}\n                      direction={handleSortDirection(column.name)}\n                      disabled={\n                        column.name === 'no' ||\n                        column.name === 'income' ||\n                        column.name === 'refund' ||\n                        column.name === 'status' ||\n                        column.name === 'client'\n                      }\n                    >\n                      {column.value}\n                    </TableSortLabel>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {transactions.map(\n                (transaction: TransactionWithClient, idx: number) => (\n                  <TableRow hover key={transaction._id}>\n                    <TableCell align=\"center\">{idx + 1}</TableCell>\n                    <TableCell align=\"center\">\n                      {moment(transaction.createdAt).format(\n                        'DD MMM, YYYY hh:mm:ss'\n                      )}\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      {transaction.user === profile._id ? 'Received' : 'Sent'}\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      {transaction.type\n                        .split('_')\n                        .map(\n                          item =>\n                            item.charAt(0).toUpperCase() +\n                            item.slice(1).toLowerCase()\n                        )\n                        .join(' ')}\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      {transaction.client._id !== profile._id && (\n                        <Link\n                          color=\"inherit\"\n                          component={RouterLink}\n                          to={'/users/' + transaction.client.name}\n                          variant=\"body2\"\n                        >\n                          {transaction.client?.name}\n                        </Link>\n                      )}\n                    </TableCell>\n                    <TableCell align=\"center\">${transaction.amount}</TableCell>\n                    <TableCell align=\"center\">${transaction.fee}</TableCell>\n                    <TableCell align=\"center\">\n                      ${transaction.amount - transaction.fee}\n                    </TableCell>\n                    <TableCell width=\"10%\">\n                      <Button\n                        name={transaction?._id}\n                        color=\"primary\"\n                        variant=\"contained\"\n                        size=\"small\"\n                        disabled={transaction.refund}\n                        onClick={() => handleRefund(transaction)}\n                      >\n                        Refund\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                )\n              )}\n            </TableBody>\n          </Table>\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={count}\n            rowsPerPage={status.limit}\n            page={status.page}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeLimit}\n          />\n        </Box>\n      </PerfectScrollbar>\n      <Box p={2} display=\"flex\" justifyContent=\"flex-end\" />\n    </Card>\n  );\n};\n\nPayment.propTypes = {\n  className: PropTypes.string,\n  //@ts-ignore\n  profile: PropTypes.object\n};\n\nexport default Payment;\n","import React, { FC } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Card,\n  Paper,\n  Input,\n  FormControl,\n  InputLabel,\n  Switch,\n  Select,\n  MenuItem,\n  Tooltip,\n  IconButton,\n  FormHelperText,\n  makeStyles\n} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport { Theme } from 'src/theme';\nimport axios from 'src/utils/axios';\nimport { User } from 'src/types/user';\n\ninterface AnnouncementProps {\n  className?: string;\n  profile: User;\n}\n\nconst types = ['success', 'info', 'warning', 'error'];\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  label: {\n    marginLeft: theme.spacing(1)\n  },\n  control: {\n    minWidth: 300,\n    marginLeft: theme.spacing(2),\n    marginBottom: theme.spacing(2)\n  },\n  inputContainer: {\n    flexGrow: 1,\n    marginLeft: theme.spacing(2),\n    paddingBottom: theme.spacing(0.5),\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(0.5),\n    [theme.breakpoints.down('sm')]: {\n      width: '100%'\n    }\n  },\n  box: {\n    alignItems: 'center',\n    display: 'flex',\n    [theme.breakpoints.down('sm')]: {\n      flexWrap: 'wrap'\n    }\n  }\n}));\n\nconst Announcement: FC<AnnouncementProps> = ({\n  className,\n  profile,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        alert: profile.alert || '',\n        alertType: profile.alertType || '',\n        alertChecked: profile.alertChecked || false,\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        alert: Yup.string().required('Content is required')\n      })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          await axios.post('/admin/alert', { ...values });\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Announcement Updated', {\n            variant: 'success'\n          });\n        } catch (err) {\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\n        <form onSubmit={handleSubmit}>\n          <Card className={clsx(classes.root, className)} {...rest}>\n            <Box flexGrow={1}>\n              <Box display=\"flex\">\n                <FormControl\n                  className={classes.control}\n                  variant=\"outlined\"\n                  required\n                >\n                  <InputLabel>Type</InputLabel>\n                  <Select\n                    name=\"alertType\"\n                    value={values.alertType}\n                    onChange={handleChange}\n                    label=\"Type\"\n                  >\n                    {types.map((type, i) => (\n                      <MenuItem key={i} value={type}>\n                        {type}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                <Box flexGrow={1} />\n                <Box mr={2}>\n                  <Switch\n                    color=\"primary\"\n                    name=\"alertChecked\"\n                    checked={values.alertChecked}\n                    onChange={handleChange}\n                  />\n                </Box>\n              </Box>\n              <Box className={classes.box}>\n                <Paper className={classes.inputContainer} variant=\"outlined\">\n                  <Input\n                    name=\"alert\"\n                    value={values.alert}\n                    disableUnderline\n                    fullWidth\n                    multiline\n                    rows={6}\n                    onChange={handleChange}\n                  />\n                </Paper>\n                <Tooltip title=\"Send\">\n                  <span>\n                    <IconButton\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </span>\n                </Tooltip>\n              </Box>\n              {errors.alert && (\n                <Box mt={3}>\n                  <FormHelperText error>{errors.alert}</FormHelperText>\n                </Box>\n              )}\n              {errors.submit && (\n                <Box mt={3}>\n                  <FormHelperText error>{errors.submit}</FormHelperText>\n                </Box>\n              )}\n            </Box>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nAnnouncement.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Announcement;\n","import React, {\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n  ChangeEvent\n} from 'react';\nimport { Container, Box, Tab, Tabs, makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { Theme } from 'src/theme';\nimport { User } from 'src/types/user';\nimport Overview from './Overview';\nimport Payment from './Payment';\nimport Announcement from './Announcement';\n\nconst tabs = [\n  { value: 'overview', label: 'Overview' },\n  { value: 'alert', label: 'Announcement' },\n  { value: 'payment', label: 'Transactions' }\n];\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst AdminView: FC = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [currentTab, setCurrentTab] = useState<string>('overview');\n  const [profile, setProfile] = useState<User | null>(null);\n\n  const getPosts = useCallback(async () => {\n    const response = await axios.get<{ user: User }>('/account/about');\n\n    if (isMountedRef.current) {\n      setProfile(response.data.user);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  if (!profile) {\n    return null;\n  }\n\n  const handleTabsChange = (event: ChangeEvent, value: string): void =>\n    setCurrentTab(value);\n\n  return (\n    <Page className={classes.root} title=\"Administrator\">\n      <Container maxWidth={false}>\n        <Box mt={6}>\n          <Tabs\n            onChange={handleTabsChange}\n            scrollButtons=\"auto\"\n            value={currentTab}\n            textColor=\"secondary\"\n            variant=\"scrollable\"\n          >\n            {tabs.map(tab => (\n              <Tab key={tab.value} label={tab.label} value={tab.value} />\n            ))}\n          </Tabs>\n        </Box>\n        <Box py={3} pb={6}>\n          {currentTab === 'alert' && <Announcement profile={profile} />}\n          {currentTab === 'overview' && <Overview />}\n          {currentTab === 'payment' && <Payment profile={profile} />}\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default AdminView;\n"],"sourceRoot":""}